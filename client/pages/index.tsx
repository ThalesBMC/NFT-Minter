import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import React, { useEffect, useState } from "react";
import NFT from "../utils/NFT.json";
import { ethers } from "ethers";
import { CONTRACT_ADDRESS } from "../utils/constants";
import SignMessage from "../components/SignMessage";
declare let window: any;
const Home: NextPage = () => {
  const [currentAccount, setCurrentAccount] = useState(null);

  const checkIfWalletIsConnected = async () => {
    try {
      const { ethereum } = window;

      if (!ethereum) {
        console.log("Make sure you have MetaMask!");
        return;
      } else {
        console.log("We have the ethereum object", ethereum);

        const accounts = await ethereum.request({ method: "eth_accounts" });

        if (accounts.length !== 0) {
          const account = accounts[0];
          console.log("Found an authorized account:", account);
          setCurrentAccount(account);
        } else {
          console.log("No authorized account found");
        }
      }
    } catch (error) {
      console.log(error);
    }
  };
  const connectWalletAction = async () => {
    try {
      const { ethereum } = window;

      if (!ethereum) {
        alert("Get MetaMask!");
        return;
      }

      const accounts = await ethereum.request({
        method: "eth_requestAccounts",
      });

      console.log("Connected", accounts[0]);
      setCurrentAccount(accounts[0]);
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    checkIfWalletIsConnected();
  }, []);
  useEffect(() => {
    const checkNetwork = async () => {
      try {
        if (window.ethereum.networkVersion !== "4") {
          alert("Please connect to Rinkeby!");
        }
      } catch (error) {
        console.log(error);
      }
    };

    if (currentAccount) {
      checkNetwork();
    }
  }, [currentAccount]);
  // useEffect(() => {
  //   /*
  //    * The function we will call that interacts with out smart contract
  //    */
  //   const fetchNFTMetadata = async () => {
  //     console.log("Checking for Character NFT on address:", currentAccount);

  //     const provider = new ethers.providers.Web3Provider(window.ethereum);
  //     const signer = provider.getSigner();
  //     const gameContract = new ethers.Contract(
  //       CONTRACT_ADDRESS,
  //       NFT.abi,
  //       signer
  //     );

  //     const txn = await gameContract.checkIfUserHasNFT();
  //   };

  //   /*
  //    * We only want to run this, if we have a connected wallet
  //    */
  //   if (currentAccount) {
  //     console.log("CurrentAccount:", currentAccount);
  //     fetchNFTMetadata();
  //   }
  // }, [currentAccount]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <button
        className="cta-button connect-wallet-button"
        onClick={connectWalletAction}
      >
        Connect Wallet To Get Started
      </button>
      <SignMessage />
    </div>
  );
};

export default Home;
